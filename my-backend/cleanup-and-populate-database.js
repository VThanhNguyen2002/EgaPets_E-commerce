const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

async function cleanupAndPopulateDatabase() {
  const client = await pool.connect();
  
  try {
    await client.query('BEGIN');
    
    console.log('üßπ Starting database cleanup and population...');
    
    // 1. Add sample data to empty tables
    console.log('\nüìù Adding sample data to empty tables...');
    
    // Add categories to danhmucsanpham
    const categoryCount = await client.query('SELECT COUNT(*) FROM danhmucsanpham');
    if (categoryCount.rows[0].count === '0') {
      console.log('Adding sample categories to danhmucsanpham...');
      await client.query(`
        INSERT INTO danhmucsanpham (ten_danh_muc) VALUES 
        ('Th·ª©c ƒÉn cho ch√≥'),
        ('Th·ª©c ƒÉn cho m√®o'),
        ('ƒê·ªì ch∆°i th√∫ c∆∞ng'),
        ('Ph·ª• ki·ªán th√∫ c∆∞ng'),
        ('Thu·ªëc v√† vitamin'),
        ('V·ªá sinh th√∫ c∆∞ng')
      `);
    }
    
    // Add categories to danh_muc_san_pham
    const categoryCount2 = await client.query('SELECT COUNT(*) FROM danh_muc_san_pham');
    if (categoryCount2.rows[0].count === '0') {
      console.log('Adding sample categories to danh_muc_san_pham...');
      await client.query(`
        INSERT INTO danh_muc_san_pham (ten_danh_muc) VALUES 
        ('Th·ª©c ƒÉn cho ch√≥'),
        ('Th·ª©c ƒÉn cho m√®o'),
        ('ƒê·ªì ch∆°i th√∫ c∆∞ng'),
        ('Ph·ª• ki·ªán th√∫ c∆∞ng'),
        ('Thu·ªëc v√† vitamin'),
        ('V·ªá sinh th√∫ c∆∞ng')
      `);
    }
    
    // Get category IDs from both tables
    const categories1 = await client.query('SELECT id, ten_danh_muc FROM danhmucsanpham ORDER BY id');
    console.log('danhmucsanpham categories:', categories1.rows);
    
    const categories2 = await client.query('SELECT id, ten_danh_muc FROM danh_muc_san_pham ORDER BY id');
    console.log('danh_muc_san_pham categories:', categories2.rows);
    
    const categoryMap1 = {};
    categories1.rows.forEach(cat => {
      categoryMap1[cat.ten_danh_muc] = cat.id;
    });
    
    const categoryMap2 = {};
    categories2.rows.forEach(cat => {
      categoryMap2[cat.ten_danh_muc] = cat.id;
    });
    
    // Add products to sanpham table (using danhmucsanpham IDs)
    const sanphamCount = await client.query('SELECT COUNT(*) FROM sanpham');
    console.log(`Current sanpham count: ${sanphamCount.rows[0].count}`);
    
    if (parseInt(sanphamCount.rows[0].count) < 5) {
      console.log('Adding sample products to sanpham...');
      await client.query(`
        INSERT INTO sanpham (ma_san_pham, ten_san_pham, thuong_hieu, loai, gia_thanh, so_luong, danh_muc_id, img_url) VALUES 
        ('RC001', 'Royal Canin Adult', 'Royal Canin', 'Th·ª©c ƒÉn kh√¥', 450000, 50, $1, '/images/royal-canin-adult.jpg'),
        ('WH001', 'Whiskas Adult', 'Whiskas', 'Th·ª©c ƒÉn ∆∞·ªõt', 85000, 100, $2, '/images/whiskas-adult.jpg'),
        ('PD001', 'Pedigree Puppy', 'Pedigree', 'Th·ª©c ƒÉn kh√¥', 320000, 30, $1, '/images/pedigree-puppy.jpg'),
        ('ME001', 'Me-O Kitten', 'Me-O', 'Th·ª©c ƒÉn kh√¥', 75000, 80, $2, '/images/me-o-kitten.jpg'),
        ('PT001', 'B√≥ng tennis cho ch√≥', 'Pet Toy', 'ƒê·ªì ch∆°i', 25000, 200, $3, '/images/tennis-ball.jpg')
      `, [
        categoryMap1['Th·ª©c ƒÉn cho ch√≥'],
        categoryMap1['Th·ª©c ƒÉn cho m√®o'],
        categoryMap1['ƒê·ªì ch∆°i th√∫ c∆∞ng']
      ]);
    }
    
    // Add products to san_pham table (using danh_muc_san_pham IDs)
    const san_phamCount = await client.query('SELECT COUNT(*) FROM san_pham');
    console.log(`Current san_pham count: ${san_phamCount.rows[0].count}`);
    
    if (parseInt(san_phamCount.rows[0].count) < 8) {
      console.log('Adding more sample products to san_pham...');
      await client.query(`
        INSERT INTO san_pham (ten_san_pham, mo_ta, gia, so_luong_ton_kho, danh_muc_id, hinh_anh_url, trang_thai) VALUES 
        ($4, 'Th·ª©c ƒÉn dinh d∆∞·ª°ng cao c·∫•p cho ch√≥', 520000, 40, $1, '/images/hills-science.jpg', 'active'),
        ('Purina Pro Plan', 'Th·ª©c ƒÉn chuy√™n nghi·ªáp cho m√®o', 380000, 60, $2, '/images/purina-pro.jpg', 'active'),
        ('Acana Heritage', 'Th·ª©c ƒÉn t·ª± nhi√™n cho ch√≥', 680000, 25, $1, '/images/acana-heritage.jpg', 'active'),
        ('Orijen Cat Food', 'Th·ª©c ƒÉn cao c·∫•p cho m√®o', 750000, 35, $2, '/images/orijen-cat.jpg', 'active'),
        ('Kong Classic', 'ƒê·ªì ch∆°i cao su b·ªÅn ch·∫Øc', 45000, 80, $3, '/images/kong-classic.jpg', 'active')
      `, [
        categoryMap2['Th·ª©c ƒÉn cho ch√≥'],
        categoryMap2['Th·ª©c ƒÉn cho m√®o'],
        categoryMap2['ƒê·ªì ch∆°i th√∫ c∆∞ng'],
        "Hill's Science Diet"
      ]);
    }
    
    // Add services
    const serviceCount = await client.query('SELECT COUNT(*) FROM dichvu');
    if (serviceCount.rows[0].count === '0') {
      console.log('Adding sample services...');
      await client.query(`
        INSERT INTO dichvu (ten_dich_vu, mo_ta, gia_mac_dinh) VALUES 
        ('T·∫Øm r·ª≠a c∆° b·∫£n', 'D·ªãch v·ª• t·∫Øm r·ª≠a c∆° b·∫£n cho th√∫ c∆∞ng', 100000),
        ('C·∫Øt t·ªâa l√¥ng', 'D·ªãch v·ª• c·∫Øt t·ªâa l√¥ng chuy√™n nghi·ªáp', 150000),
        ('Kh√°m s·ª©c kh·ªèe t·ªïng qu√°t', 'Kh√°m s·ª©c kh·ªèe ƒë·ªãnh k·ª≥ cho th√∫ c∆∞ng', 200000),
        ('Ti√™m ph√≤ng', 'D·ªãch v·ª• ti√™m ph√≤ng ƒë·∫ßy ƒë·ªß', 300000),
        ('Spa th√∫ c∆∞ng', 'D·ªãch v·ª• spa cao c·∫•p', 500000)
      `);
      
      // Get service IDs
      const services = await client.query('SELECT id, ten_dich_vu FROM dichvu ORDER BY id');
      console.log('Available services:', services.rows);
      
      const serviceMap = {};
      services.rows.forEach(service => {
        serviceMap[service.ten_dich_vu] = service.id;
      });
      
      // Add service details using actual service IDs
      if (services.rows.length >= 2) {
        const tamRuaId = serviceMap['T·∫Øm r·ª≠a c∆° b·∫£n'];
        const catTiaId = serviceMap['C·∫Øt t·ªâa l√¥ng'];
        
        await client.query(`
          INSERT INTO dichvuchitiet (dich_vu_id, can_nang, loai_long, gia) VALUES 
          ($1, '<3kg', 'Ng·∫Øn', 80000),
          ($1, '<3kg', 'D√†i', 100000),
          ($1, '3-5kg', 'Ng·∫Øn', 100000),
          ($1, '3-5kg', 'D√†i', 120000),
          ($1, '5-10kg', 'Ng·∫Øn', 120000),
          ($1, '5-10kg', 'D√†i', 150000),
          ($1, '10-20kg', 'Ng·∫Øn', 180000),
          ($1, '10-20kg', 'D√†i', 220000),
          ($1, '>20kg', 'Ng·∫Øn', 250000),
          ($1, '>20kg', 'D√†i', 300000),
          ($2, '<3kg', 'Ng·∫Øn', 120000),
          ($2, '<3kg', 'D√†i', 150000),
          ($2, '3-5kg', 'Ng·∫Øn', 150000),
          ($2, '3-5kg', 'D√†i', 180000),
          ($2, '5-10kg', 'Ng·∫Øn', 180000),
          ($2, '5-10kg', 'D√†i', 220000),
          ($2, '10-20kg', 'Ng·∫Øn', 250000),
          ($2, '10-20kg', 'D√†i', 300000),
          ($2, '>20kg', 'Ng·∫Øn', 350000),
          ($2, '>20kg', 'D√†i', 400000)
        `, [tamRuaId, catTiaId]);
      }
    }
    
    await client.query('COMMIT');
    console.log('\n‚úÖ Database cleanup and population completed successfully!');
    
    // Show final counts
    console.log('\nüìä Final data counts:');
    const tables = ['danhmucsanpham', 'danh_muc_san_pham', 'sanpham', 'san_pham', 'dichvu', 'dichvuchitiet', 'khachhang'];
    for (const table of tables) {
      try {
        const result = await client.query(`SELECT COUNT(*) FROM ${table}`);
        console.log(`- ${table}: ${result.rows[0].count} records`);
      } catch (error) {
        console.log(`- ${table}: Table not accessible`);
      }
    }
    
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('‚ùå Error during cleanup and population:', error.message);
    throw error;
  } finally {
    client.release();
    await pool.end();
  }
}

cleanupAndPopulateDatabase().catch(console.error);