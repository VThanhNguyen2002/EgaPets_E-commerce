const cartSvc = require('@modules/Cart/cart.service');
const { requireFields } = require('@shared/helpers/validate');
const rsp = require('@shared/helpers/response');
const { v4: uuid } = require('uuid');

// üí° B·ªô nh·ªõ t·∫°m ƒë·ªÉ l∆∞u th·ªùi gian g·ªçi API g·∫ßn nh·∫•t
const cartRateLimit = new Map(); // key = userId | sessionId ‚Üí timestamp

/* helper l·∫•y customerId | sessionId */
/* helper: x√°c ƒë·ªãnh ‚Äúai‚Äù ƒëang thao t√°c gi·ªè */
function getIdentity(req, res) {
  // ‚Äî ƒê√É ƒëƒÉng nh·∫≠p (Kh√°ch H√†ng) ‚Üí ch·ªâ d√πng userId, KH√îNG d√≠nh sid guest
  const user = req.user;
  if (user && user.role?.toLowerCase() === 'khachhang') {
    return { userId: user.id, khachHangId: user.khachHangId };
  }

  // ‚Äî Guest: d√πng sid cookie (kh·ªüi t·∫°o n·∫øu ch∆∞a c√≥)
  const cookies = req.cookies || {};
  let sid = cookies.sid || req.query.sid || req.headers['x-session-id'];
  if (!sid) {
    sid = require('uuid').v4();
    res.cookie('sid', sid, {
      httpOnly: true, sameSite: 'lax',
      maxAge: 1000 * 60 * 60 * 24 * 30,  // 30 ng√†y
    });
  }
  return { sessionId: sid };
}


/* ---------- CART ---------- */
exports.list = async (req, res) => {
  const identity = getIdentity(req, res);
  const key = identity.userId || identity.sessionId;
  const now = Date.now();

  const lastCalled = cartRateLimit.get(key);
  const limitMs = 1000; // 1 gi√¢y

  if (lastCalled && now - lastCalled < limitMs) {
    return rsp.ok(res, { warning: "B·∫°n thao t√°c qu√° nhanh. Vui l√≤ng ƒë·ª£i." });
  }

  cartRateLimit.set(key, now);

  try {
    const data = await cartSvc.listItems(identity);
    rsp.ok(res, data);
  } catch (e) {
    console.error(e);
    rsp.error(res, 500, 'L·ªói l·∫•y gi·ªè');
  }
};

exports.add = async (req, res) => {
  if (!requireFields(res, {
    productId: req.body.productId,
    quantity : req.body.quantity
  })) return;

  try {
    await cartSvc.addItem({
      ...getIdentity(req, res),
      productId: req.body.productId,
      quantity : req.body.quantity
    });
    rsp.created(res, { message: 'ƒê√£ th√™m v√†o gi·ªè' });
  } catch (e) {
    console.error(e);
    rsp.error(res, 500, e.message || 'L·ªói th√™m gi·ªè');
  }
};

/* ----- REMOVE ----- */
exports.remove = async (req, res) => {
  if (!requireFields(res, { id: req.params.id })) return;
  try {
    await cartSvc.remove(req.params.id);

    // üëá  tr·∫£ l·∫°i gi·ªè h√†ng sau khi xo√°
    const data = await cartSvc.listItems(getIdentity(req, res));
    rsp.ok(res, data);
  } catch (e) {
    console.error(e);
    rsp.error(res, 500, "L·ªói xo√°");
  }
};

/* ----- UPDATE QTY (l√Ω do t∆∞∆°ng t·ª±) ----- */
exports.update = async (req, res) => {
  if (!requireFields(res, { id: req.params.id, qty: req.body.quantity })) return;
  try {
    await cartSvc.updateQty(req.params.id, req.body.quantity);
    const data = await cartSvc.listItems(getIdentity(req, res));
    rsp.ok(res, data);
  } catch (e) {
    console.error(e);
    rsp.error(res, 500, "L·ªói c·∫≠p nh·∫≠t");
  }
};
/* ---------- CHECKOUT ---------- */
exports.summary = async (req, res) => {
  try {
    const data = await cartSvc.cartSummary(getIdentity(req, res));
    rsp.ok(res, data);
  } catch (e) { console.error(e); rsp.error(res, 500, 'L·ªói summary'); }
};
